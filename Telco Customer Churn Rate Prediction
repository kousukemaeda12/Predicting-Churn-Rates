{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Predicting Churn Rates of Telco Customers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.read_csv('/Users/kousukemaeda/Desktop/UCLA/Data Science/Winter 2019/Machine Learning Using RCOM SCI-X 450.4/Final Project/data/WA_Fn-UseC_-Telco-Customer-Churn.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Overview"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customerID</th>\n",
       "      <th>gender</th>\n",
       "      <th>SeniorCitizen</th>\n",
       "      <th>Partner</th>\n",
       "      <th>Dependents</th>\n",
       "      <th>tenure</th>\n",
       "      <th>PhoneService</th>\n",
       "      <th>MultipleLines</th>\n",
       "      <th>InternetService</th>\n",
       "      <th>OnlineSecurity</th>\n",
       "      <th>...</th>\n",
       "      <th>DeviceProtection</th>\n",
       "      <th>TechSupport</th>\n",
       "      <th>StreamingTV</th>\n",
       "      <th>StreamingMovies</th>\n",
       "      <th>Contract</th>\n",
       "      <th>PaperlessBilling</th>\n",
       "      <th>PaymentMethod</th>\n",
       "      <th>MonthlyCharges</th>\n",
       "      <th>TotalCharges</th>\n",
       "      <th>Churn</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7590-VHVEG</td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>1</td>\n",
       "      <td>No</td>\n",
       "      <td>No phone service</td>\n",
       "      <td>DSL</td>\n",
       "      <td>No</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Electronic check</td>\n",
       "      <td>29.85</td>\n",
       "      <td>29.85</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5575-GNVDE</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>34</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>DSL</td>\n",
       "      <td>Yes</td>\n",
       "      <td>...</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>One year</td>\n",
       "      <td>No</td>\n",
       "      <td>Mailed check</td>\n",
       "      <td>56.95</td>\n",
       "      <td>1889.5</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3668-QPYBK</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>2</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>DSL</td>\n",
       "      <td>Yes</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Mailed check</td>\n",
       "      <td>53.85</td>\n",
       "      <td>108.15</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7795-CFOCW</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>45</td>\n",
       "      <td>No</td>\n",
       "      <td>No phone service</td>\n",
       "      <td>DSL</td>\n",
       "      <td>Yes</td>\n",
       "      <td>...</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>One year</td>\n",
       "      <td>No</td>\n",
       "      <td>Bank transfer (automatic)</td>\n",
       "      <td>42.30</td>\n",
       "      <td>1840.75</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9237-HQITU</td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>2</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Fiber optic</td>\n",
       "      <td>No</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Electronic check</td>\n",
       "      <td>70.70</td>\n",
       "      <td>151.65</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   customerID  gender  SeniorCitizen Partner Dependents  tenure PhoneService  \\\n",
       "0  7590-VHVEG  Female              0     Yes         No       1           No   \n",
       "1  5575-GNVDE    Male              0      No         No      34          Yes   \n",
       "2  3668-QPYBK    Male              0      No         No       2          Yes   \n",
       "3  7795-CFOCW    Male              0      No         No      45           No   \n",
       "4  9237-HQITU  Female              0      No         No       2          Yes   \n",
       "\n",
       "      MultipleLines InternetService OnlineSecurity  ...  DeviceProtection  \\\n",
       "0  No phone service             DSL             No  ...                No   \n",
       "1                No             DSL            Yes  ...               Yes   \n",
       "2                No             DSL            Yes  ...                No   \n",
       "3  No phone service             DSL            Yes  ...               Yes   \n",
       "4                No     Fiber optic             No  ...                No   \n",
       "\n",
       "  TechSupport StreamingTV StreamingMovies        Contract PaperlessBilling  \\\n",
       "0          No          No              No  Month-to-month              Yes   \n",
       "1          No          No              No        One year               No   \n",
       "2          No          No              No  Month-to-month              Yes   \n",
       "3         Yes          No              No        One year               No   \n",
       "4          No          No              No  Month-to-month              Yes   \n",
       "\n",
       "               PaymentMethod MonthlyCharges  TotalCharges Churn  \n",
       "0           Electronic check          29.85         29.85    No  \n",
       "1               Mailed check          56.95        1889.5    No  \n",
       "2               Mailed check          53.85        108.15   Yes  \n",
       "3  Bank transfer (automatic)          42.30       1840.75    No  \n",
       "4           Electronic check          70.70        151.65   Yes  \n",
       "\n",
       "[5 rows x 21 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7043"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Preparation and Cleansing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Transforming Qualitative to Quantitative Representations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "data['gender'] = np.where(data['gender'] == 'Male', '1', '0')\n",
    "data['Partner'] = np.where(data['Partner'] == 'Yes', '1', '0')\n",
    "data['Dependents'] = np.where(data['Dependents'] == 'Yes', '1', '0')\n",
    "data['PhoneService'] = np.where(data['PhoneService'] == 'Yes', '1', '0')\n",
    "data['PaperlessBilling'] = np.where(data['PaperlessBilling'] == 'Yes', '1', '0')\n",
    "data['Churn'] = np.where(data['Churn'] == 'Yes', '1', '0')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/kousukemaeda/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n",
      "/Users/kousukemaeda/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  \n",
      "/Users/kousukemaeda/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  This is separate from the ipykernel package so we can avoid doing imports until\n",
      "/Users/kousukemaeda/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  \"\"\"\n",
      "/Users/kousukemaeda/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:6: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  \n",
      "/Users/kousukemaeda/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:7: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  import sys\n",
      "/Users/kousukemaeda/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:9: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  if __name__ == '__main__':\n",
      "/Users/kousukemaeda/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:10: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  # Remove the CWD from sys.path while we load stuff.\n",
      "/Users/kousukemaeda/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  # This is added back by InteractiveShellApp.init_path()\n",
      "/Users/kousukemaeda/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:13: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  del sys.path[0]\n",
      "/Users/kousukemaeda/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:14: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  \n",
      "/Users/kousukemaeda/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:15: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  from ipykernel import kernelapp as app\n",
      "/Users/kousukemaeda/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:17: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "/Users/kousukemaeda/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:18: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "/Users/kousukemaeda/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:19: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "/Users/kousukemaeda/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:21: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "/Users/kousukemaeda/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:22: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "/Users/kousukemaeda/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:23: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "/Users/kousukemaeda/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:25: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "/Users/kousukemaeda/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "/Users/kousukemaeda/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:27: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "/Users/kousukemaeda/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:29: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "/Users/kousukemaeda/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:30: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "/Users/kousukemaeda/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:31: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "/Users/kousukemaeda/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:33: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "/Users/kousukemaeda/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:34: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "/Users/kousukemaeda/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:35: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n"
     ]
    }
   ],
   "source": [
    "data.MultipleLines[data.MultipleLines == 'Yes'] = '1'\n",
    "data.MultipleLines[data.MultipleLines == 'No'] = '0'\n",
    "data.MultipleLines[data.MultipleLines == 'No phone service'] = '2'\n",
    "\n",
    "data.InternetService[data.InternetService == 'DSL'] = '1'\n",
    "data.InternetService[data.InternetService == 'No'] = '0'\n",
    "data.InternetService[data.InternetService == 'Fiber optic'] = '2'\n",
    "\n",
    "data.OnlineSecurity[data.OnlineSecurity == 'Yes'] = '1'\n",
    "data.OnlineSecurity[data.OnlineSecurity == 'No'] = '0'\n",
    "data.OnlineSecurity[data.OnlineSecurity == 'No internet service'] = '2'\n",
    "\n",
    "data.OnlineBackup[data.OnlineBackup == 'Yes'] = '1'\n",
    "data.OnlineBackup[data.OnlineBackup == 'No'] = '0'\n",
    "data.OnlineBackup[data.OnlineBackup == 'No internet service'] = '2'\n",
    "\n",
    "data.DeviceProtection[data.DeviceProtection == 'Yes'] = '1'\n",
    "data.DeviceProtection[data.DeviceProtection == 'No'] = '0'\n",
    "data.DeviceProtection[data.DeviceProtection == 'No internet service'] = '2'\n",
    "\n",
    "data.TechSupport[data.TechSupport == 'Yes'] = '1'\n",
    "data.TechSupport[data.TechSupport == 'No'] = '0'\n",
    "data.TechSupport[data.TechSupport == 'No internet service'] = '2'\n",
    "\n",
    "data.StreamingTV[data.StreamingTV == 'Yes'] = '1'\n",
    "data.StreamingTV[data.StreamingTV == 'No'] = '0'\n",
    "data.StreamingTV[data.StreamingTV == 'No internet service'] = '2'\n",
    "\n",
    "data.StreamingMovies[data.StreamingMovies == 'Yes'] = '1'\n",
    "data.StreamingMovies[data.StreamingMovies == 'No'] = '0'\n",
    "data.StreamingMovies[data.StreamingMovies == 'No internet service'] = '2'\n",
    "\n",
    "data.Contract[data.Contract == 'One year'] = '1'\n",
    "data.Contract[data.Contract == 'Month-to-month'] = '0'\n",
    "data.Contract[data.Contract == 'Two year'] = '2'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### We will drop the column: PaymentMethod"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customerID</th>\n",
       "      <th>gender</th>\n",
       "      <th>SeniorCitizen</th>\n",
       "      <th>Partner</th>\n",
       "      <th>Dependents</th>\n",
       "      <th>tenure</th>\n",
       "      <th>PhoneService</th>\n",
       "      <th>MultipleLines</th>\n",
       "      <th>InternetService</th>\n",
       "      <th>OnlineSecurity</th>\n",
       "      <th>OnlineBackup</th>\n",
       "      <th>DeviceProtection</th>\n",
       "      <th>TechSupport</th>\n",
       "      <th>StreamingTV</th>\n",
       "      <th>StreamingMovies</th>\n",
       "      <th>Contract</th>\n",
       "      <th>PaperlessBilling</th>\n",
       "      <th>MonthlyCharges</th>\n",
       "      <th>TotalCharges</th>\n",
       "      <th>Churn</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7590-VHVEG</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>29.85</td>\n",
       "      <td>29.85</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5575-GNVDE</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>34</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>56.95</td>\n",
       "      <td>1889.5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3668-QPYBK</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>53.85</td>\n",
       "      <td>108.15</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7795-CFOCW</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>45</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>42.30</td>\n",
       "      <td>1840.75</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9237-HQITU</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>70.70</td>\n",
       "      <td>151.65</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   customerID gender  SeniorCitizen Partner Dependents  tenure PhoneService  \\\n",
       "0  7590-VHVEG      0              0       1          0       1            0   \n",
       "1  5575-GNVDE      1              0       0          0      34            1   \n",
       "2  3668-QPYBK      1              0       0          0       2            1   \n",
       "3  7795-CFOCW      1              0       0          0      45            0   \n",
       "4  9237-HQITU      0              0       0          0       2            1   \n",
       "\n",
       "  MultipleLines InternetService OnlineSecurity OnlineBackup DeviceProtection  \\\n",
       "0             2               1              0            1                0   \n",
       "1             0               1              1            0                1   \n",
       "2             0               1              1            1                0   \n",
       "3             2               1              1            0                1   \n",
       "4             0               2              0            0                0   \n",
       "\n",
       "  TechSupport StreamingTV StreamingMovies Contract PaperlessBilling  \\\n",
       "0           0           0               0        0                1   \n",
       "1           0           0               0        1                0   \n",
       "2           0           0               0        0                1   \n",
       "3           1           0               0        1                0   \n",
       "4           0           0               0        0                1   \n",
       "\n",
       "   MonthlyCharges TotalCharges Churn  \n",
       "0           29.85        29.85     0  \n",
       "1           56.95       1889.5     0  \n",
       "2           53.85       108.15     1  \n",
       "3           42.30      1840.75     0  \n",
       "4           70.70       151.65     1  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = data[['customerID', 'gender', 'SeniorCitizen', 'Partner', 'Dependents', 'tenure', 'PhoneService', 'MultipleLines', 'InternetService', 'OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport', 'StreamingTV', 'StreamingMovies', 'Contract', 'PaperlessBilling', 'MonthlyCharges', 'TotalCharges', 'Churn']]\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(7043, 20)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Switch the data type of TotalCharges from object to float, and SeniorCitizen from integer to object"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "customerID           object\n",
       "gender               object\n",
       "SeniorCitizen         int64\n",
       "Partner              object\n",
       "Dependents           object\n",
       "tenure                int64\n",
       "PhoneService         object\n",
       "MultipleLines        object\n",
       "InternetService      object\n",
       "OnlineSecurity       object\n",
       "OnlineBackup         object\n",
       "DeviceProtection     object\n",
       "TechSupport          object\n",
       "StreamingTV          object\n",
       "StreamingMovies      object\n",
       "Contract             object\n",
       "PaperlessBilling     object\n",
       "MonthlyCharges      float64\n",
       "TotalCharges         object\n",
       "Churn                object\n",
       "dtype: object"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/kousukemaeda/anaconda3/lib/python3.6/site-packages/ipykernel_launcher.py:1: FutureWarning: convert_objects is deprecated.  To re-infer data dtypes for object columns, use Series.infer_objects()\n",
      "For all other conversions use the data-type specific converters pd.to_datetime, pd.to_timedelta and pd.to_numeric.\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    }
   ],
   "source": [
    "data['TotalCharges'] = data['TotalCharges'].convert_objects(convert_numeric=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      29.85\n",
       "1    1889.50\n",
       "2     108.15\n",
       "Name: TotalCharges, dtype: float64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['TotalCharges'].head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    29.85\n",
       "1    56.95\n",
       "2    53.85\n",
       "Name: MonthlyCharges, dtype: float64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['MonthlyCharges'].head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "data['SeniorCitizen'] = data['SeniorCitizen'].astype(object)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "customerID           object\n",
       "gender               object\n",
       "SeniorCitizen        object\n",
       "Partner              object\n",
       "Dependents           object\n",
       "tenure                int64\n",
       "PhoneService         object\n",
       "MultipleLines        object\n",
       "InternetService      object\n",
       "OnlineSecurity       object\n",
       "OnlineBackup         object\n",
       "DeviceProtection     object\n",
       "TechSupport          object\n",
       "StreamingTV          object\n",
       "StreamingMovies      object\n",
       "Contract             object\n",
       "PaperlessBilling     object\n",
       "MonthlyCharges      float64\n",
       "TotalCharges        float64\n",
       "Churn                object\n",
       "dtype: object"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## EDA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 7043 entries, 0 to 7042\n",
      "Data columns (total 20 columns):\n",
      "customerID          7043 non-null object\n",
      "gender              7043 non-null object\n",
      "SeniorCitizen       7043 non-null object\n",
      "Partner             7043 non-null object\n",
      "Dependents          7043 non-null object\n",
      "tenure              7043 non-null int64\n",
      "PhoneService        7043 non-null object\n",
      "MultipleLines       7043 non-null object\n",
      "InternetService     7043 non-null object\n",
      "OnlineSecurity      7043 non-null object\n",
      "OnlineBackup        7043 non-null object\n",
      "DeviceProtection    7043 non-null object\n",
      "TechSupport         7043 non-null object\n",
      "StreamingTV         7043 non-null object\n",
      "StreamingMovies     7043 non-null object\n",
      "Contract            7043 non-null object\n",
      "PaperlessBilling    7043 non-null object\n",
      "MonthlyCharges      7043 non-null float64\n",
      "TotalCharges        7032 non-null float64\n",
      "Churn               7043 non-null object\n",
      "dtypes: float64(2), int64(1), object(17)\n",
      "memory usage: 1.1+ MB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tenure</th>\n",
       "      <th>MonthlyCharges</th>\n",
       "      <th>TotalCharges</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>7043.000000</td>\n",
       "      <td>7043.000000</td>\n",
       "      <td>7032.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>32.371149</td>\n",
       "      <td>64.761692</td>\n",
       "      <td>2283.300441</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>24.559481</td>\n",
       "      <td>30.090047</td>\n",
       "      <td>2266.771362</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>18.250000</td>\n",
       "      <td>18.800000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>9.000000</td>\n",
       "      <td>35.500000</td>\n",
       "      <td>401.450000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>29.000000</td>\n",
       "      <td>70.350000</td>\n",
       "      <td>1397.475000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>55.000000</td>\n",
       "      <td>89.850000</td>\n",
       "      <td>3794.737500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>72.000000</td>\n",
       "      <td>118.750000</td>\n",
       "      <td>8684.800000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            tenure  MonthlyCharges  TotalCharges\n",
       "count  7043.000000     7043.000000   7032.000000\n",
       "mean     32.371149       64.761692   2283.300441\n",
       "std      24.559481       30.090047   2266.771362\n",
       "min       0.000000       18.250000     18.800000\n",
       "25%       9.000000       35.500000    401.450000\n",
       "50%      29.000000       70.350000   1397.475000\n",
       "75%      55.000000       89.850000   3794.737500\n",
       "max      72.000000      118.750000   8684.800000"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    3555\n",
       "0    3488\n",
       "Name: gender, dtype: int64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['gender'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "gender = (data['gender']).astype(int)\n",
    "\n",
    "plt.hist(gender, bins = 3)\n",
    "plt.xlabel = 'gender'\n",
    "plt.ylabel = 'count'\n",
    "plt.xticks([0.15,0.85],['Female','Male'])\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYAAAAD8CAYAAAB+UHOxAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4wLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvqOYd8AAAECJJREFUeJzt3H+sX3V9x/HnCypq3LQgF0JatCw2TtymkjvAmSybmPLDZWVODMaMhjVpluBwy36IS5ZOkASXKEqmJI3UFeKGjM3QKRFr1Sxm4cdFGD8lrejoTRlcV8ApEwe+98f3U/lS7u393nJ7v9TP85F8c855n/f5fj8n6e3rnnM+35uqQpLUn8PGPQBJ0ngYAJLUKQNAkjplAEhSpwwASeqUASBJnTIAJKlTBoAkdcoAkKROLRv3APbn6KOPrlWrVo17GJJ0SLn99tu/X1UT8/W9qANg1apVTE1NjXsYknRISfKfo/R5C0iSOmUASFKnRgqAJMuTXJ/k20nuT/LWJEcl2ZZkR1se2XqT5IokO5PcleSkofdZ1/p3JFl3sE5KkjS/Ua8APgl8uap+GXgTcD9wEbC9qlYD29s2wJnA6vbaAFwJkOQoYCNwCnAysHFvaEiSlt68AZDklcBvAlcBVNVPqupxYC2wpbVtAc5u62uBq2vgZmB5kuOA04FtVbWnqh4DtgFnLOrZSJJGNsoVwC8BM8Bnk9yR5DNJXgEcW1UPA7TlMa1/BbBr6PjpVpur/hxJNiSZSjI1MzOz4BOSJI1mlABYBpwEXFlVbwF+xLO3e2aTWWq1n/pzC1WbqmqyqiYnJuadxipJOkCjBMA0MF1Vt7Tt6xkEwiPt1g5t+ehQ//FDx68Edu+nLkkag3kDoKr+C9iV5PWtdBpwH7AV2DuTZx1wQ1vfCpzXZgOdCjzRbhHdBKxJcmR7+Lum1SRJYzDqN4H/GPhckiOAB4HzGYTHdUnWAw8B57TeG4GzgJ3Ak62XqtqT5BLgttZ3cVXtWZSzmMOqi750MN9eB+B7l71z3EOQ1IwUAFV1JzA5y67TZukt4II53mczsHkhA5QkHRx+E1iSOmUASFKnDABJ6pQBIEmdMgAkqVMGgCR1ygCQpE4ZAJLUKQNAkjplAEhSpwwASeqUASBJnTIAJKlTBoAkdcoAkKROGQCS1CkDQJI6ZQBIUqcMAEnqlAEgSZ0yACSpUwaAJHXKAJCkThkAktQpA0CSOmUASFKnRgqAJN9LcneSO5NMtdpRSbYl2dGWR7Z6klyRZGeSu5KcNPQ+61r/jiTrDs4pSZJGsZArgN+uqjdX1WTbvgjYXlWrge1tG+BMYHV7bQCuhEFgABuBU4CTgY17Q0OStPReyC2gtcCWtr4FOHuofnUN3AwsT3IccDqwrar2VNVjwDbgjBfw+ZKkF2DUACjgK0luT7Kh1Y6tqocB2vKYVl8B7Bo6drrV5qo/R5INSaaSTM3MzIx+JpKkBVk2Yt/bqmp3kmOAbUm+vZ/ezFKr/dSfW6jaBGwCmJycfN5+SdLiGOkKoKp2t+WjwBcY3MN/pN3aoS0fbe3TwPFDh68Edu+nLkkag3kDIMkrkvzi3nVgDXAPsBXYO5NnHXBDW98KnNdmA50KPNFuEd0ErElyZHv4u6bVJEljMMotoGOBLyTZ2/8PVfXlJLcB1yVZDzwEnNP6bwTOAnYCTwLnA1TVniSXALe1vouras+inYkkaUHmDYCqehB40yz1/wZOm6VewAVzvNdmYPPChylJWmx+E1iSOmUASFKnDABJ6pQBIEmdMgAkqVMGgCR1ygCQpE4ZAJLUKQNAkjplAEhSpwwASeqUASBJnTIAJKlTBoAkdcoAkKROGQCS1CkDQJI6ZQBIUqcMAEnqlAEgSZ0yACSpUwaAJHXKAJCkThkAktQpA0CSOmUASFKnRg6AJIcnuSPJF9v2CUluSbIjyeeTHNHqL23bO9v+VUPv8aFWfyDJ6Yt9MpKk0S3kCuADwP1D2x8FLq+q1cBjwPpWXw88VlWvAy5vfSQ5ETgXeCNwBvDpJIe/sOFLkg7USAGQZCXwTuAzbTvA24HrW8sW4Oy2vrZt0/af1vrXAtdW1VNV9V1gJ3DyYpyEJGnhRr0C+ATwl8BP2/argcer6um2PQ2saOsrgF0Abf8Trf9n9VmO+ZkkG5JMJZmamZlZwKlIkhZi3gBI8jvAo1V1+3B5ltaaZ9/+jnm2ULWpqiaranJiYmK+4UmSDtCyEXreBvxukrOAlwGvZHBFsDzJsvZb/kpgd+ufBo4HppMsA14F7Bmq7zV8jCRpic17BVBVH6qqlVW1isFD3K9V1fuArwPvbm3rgBva+ta2Tdv/taqqVj+3zRI6AVgN3LpoZyJJWpBRrgDm8kHg2iQfAe4Armr1q4Brkuxk8Jv/uQBVdW+S64D7gKeBC6rqmRfw+ZKkF2BBAVBV3wC+0dYfZJZZPFX1Y+CcOY6/FLh0oYOUJC0+vwksSZ0yACSpUwaAJHXKAJCkThkAktQpA0CSOmUASFKnDABJ6pQBIEmdMgAkqVMGgCR1ygCQpE4ZAJLUKQNAkjplAEhSpwwASeqUASBJnTIAJKlTBoAkdcoAkKROGQCS1CkDQJI6ZQBIUqcMAEnqlAEgSZ0yACSpU/MGQJKXJbk1yX8kuTfJh1v9hCS3JNmR5PNJjmj1l7btnW3/qqH3+lCrP5Dk9IN1UpKk+Y1yBfAU8PaqehPwZuCMJKcCHwUur6rVwGPA+ta/Hnisql4HXN76SHIicC7wRuAM4NNJDl/Mk5EkjW7eAKiBH7bNl7RXAW8Hrm/1LcDZbX1t26btPy1JWv3aqnqqqr4L7AROXpSzkCQt2EjPAJIcnuRO4FFgG/Ad4PGqerq1TAMr2voKYBdA2/8E8Orh+izHSJKW2EgBUFXPVNWbgZUMfmt/w2xtbZk59s1Vf44kG5JMJZmamZkZZXiSpAOwoFlAVfU48A3gVGB5kmVt10pgd1ufBo4HaPtfBewZrs9yzPBnbKqqyaqanJiYWMjwJEkLMMosoIkky9v6y4F3APcDXwfe3drWATe09a1tm7b/a1VVrX5umyV0ArAauHWxTkSStDDL5m/hOGBLm7FzGHBdVX0xyX3AtUk+AtwBXNX6rwKuSbKTwW/+5wJU1b1JrgPuA54GLqiqZxb3dCRJo5o3AKrqLuAts9QfZJZZPFX1Y+CcOd7rUuDShQ9TkrTY/CawJHXKAJCkThkAktQpA0CSOmUASFKnDABJ6pQBIEmdMgAkqVMGgCR1ygCQpE4ZAJLUKQNAkjplAEhSpwwASeqUASBJnTIAJKlTBoAkdcoAkKROGQCS1CkDQJI6ZQBIUqcMAEnqlAEgSZ0yACSpUwaAJHXKAJCkTs0bAEmOT/L1JPcnuTfJB1r9qCTbkuxoyyNbPUmuSLIzyV1JThp6r3Wtf0eSdQfvtCRJ8xnlCuBp4M+q6g3AqcAFSU4ELgK2V9VqYHvbBjgTWN1eG4ArYRAYwEbgFOBkYOPe0JAkLb15A6CqHq6qb7X1/wHuB1YAa4EtrW0LcHZbXwtcXQM3A8uTHAecDmyrqj1V9RiwDThjUc9GkjSyBT0DSLIKeAtwC3BsVT0Mg5AAjmltK4BdQ4dNt9pcdUnSGIwcAEl+Afhn4E+q6gf7a52lVvup7/s5G5JMJZmamZkZdXiSpAUaKQCSvITBf/6fq6p/aeVH2q0d2vLRVp8Gjh86fCWwez/156iqTVU1WVWTExMTCzkXSdICjDILKMBVwP1V9fGhXVuBvTN51gE3DNXPa7OBTgWeaLeIbgLWJDmyPfxd02qSpDFYNkLP24A/AO5Ocmer/RVwGXBdkvXAQ8A5bd+NwFnATuBJ4HyAqtqT5BLgttZ3cVXtWZSzkCQt2LwBUFXfZPb79wCnzdJfwAVzvNdmYPNCBihJOjj8JrAkdcoAkKROGQCS1CkDQJI6ZQBIUqcMAEnqlAEgSZ0yACSpUwaAJHXKAJCkThkAktQpA0CSOmUASFKnDABJ6pQBIEmdMgAkqVMGgCR1ygCQpE4ZAJLUKQNAkjplAEhSpwwASeqUASBJnTIAJKlTBoAkdWrZuAcgabxWXfSlcQ9Bs/jeZe886J8x7xVAks1JHk1yz1DtqCTbkuxoyyNbPUmuSLIzyV1JTho6Zl3r35Fk3cE5HUnSqEa5BfT3wBn71C4CtlfVamB72wY4E1jdXhuAK2EQGMBG4BTgZGDj3tCQJI3HvAFQVf8G7NmnvBbY0ta3AGcP1a+ugZuB5UmOA04HtlXVnqp6DNjG80NFkrSEDvQh8LFV9TBAWx7T6iuAXUN90602V12SNCaLPQsos9RqP/Xnv0GyIclUkqmZmZlFHZwk6VkHGgCPtFs7tOWjrT4NHD/UtxLYvZ/681TVpqqarKrJiYmJAxyeJGk+BxoAW4G9M3nWATcM1c9rs4FOBZ5ot4huAtYkObI9/F3TapKkMZn3ewBJ/hH4LeDoJNMMZvNcBlyXZD3wEHBOa78ROAvYCTwJnA9QVXuSXALc1vourqp9HyxLkpbQvAFQVe+dY9dps/QWcMEc77MZ2Lyg0UmSDhr/FIQkdcoAkKROGQCS1CkDQJI6ZQBIUqcMAEnqlAEgSZ0yACSpUwaAJHXKAJCkThkAktQpA0CSOmUASFKnDABJ6pQBIEmdMgAkqVMGgCR1ygCQpE4ZAJLUKQNAkjplAEhSpwwASeqUASBJnTIAJKlTBoAkdcoAkKROLXkAJDkjyQNJdia5aKk/X5I0sKQBkORw4FPAmcCJwHuTnLiUY5AkDSz1FcDJwM6qerCqfgJcC6xd4jFIklj6AFgB7Branm41SdISW7bEn5dZavWchmQDsKFt/jDJAwd9VC8uRwPfH/cgDpZ8dNwjUIcOyZ+pF/iz8tpRmpY6AKaB44e2VwK7hxuqahOwaSkH9WKSZKqqJsc9DunnhT9Tc1vqW0C3AauTnJDkCOBcYOsSj0GSxBJfAVTV00neD9wEHA5srqp7l3IMkqSBpb4FRFXdCNy41J97COn29pd0kPgzNYdU1fxdkqSfO/4pCEnqlAEwJkkqyceGtv88yd+McUjSIScD30xy5lDtPUm+PM5xHSoMgPF5CnhXkqPHPRDpUFWDe9h/BHw8ycuSvAK4FLhgvCM7NBgA4/M0g4dTf7rvjiSvTbI9yV1t+ZqlH550aKiqe4B/BT4IbASurqrvJFmX5NYkdyb5dJLDkixLck2Su5Pck+TC8Y5+vJZ8FpCe41PAXUn+dp/63zH4R7wlyR8CVwBnL/nopEPHh4FvAT8BJpP8CvB7wG+06eebGHzv6DvA0VX1qwBJlo9rwC8GBsAYVdUPklwNXAj879CutwLvauvXAPsGhKQhVfWjJJ8HflhVTyV5B/DrwFQSgJcz+DtkNwGvT/JJBtPRvzKuMb8YGADj9wkGv7l8dj89ztWV5vfT9oLB3x3bXFV/vW9Tkl9j8CfpLwR+n2f/9lh3fAYwZlW1B7gOWD9U/ncGl6sA7wO+udTjkg5xXwXes3eSRZJXJ3lNkgkG33/6JwbPC04a5yDHzSuAF4ePAe8f2r4Q2JzkL4AZ4PyxjEo6RFXV3Uk+DHw1yWHA/zGYLfQMcFUG94WKwYPjbvlNYEnqlLeAJKlTBoAkdcoAkKROGQCS1CkDQJI6ZQBIUqcMAEnqlAEgSZ36fw2EJnNp7UfUAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "senior = (data['SeniorCitizen']).astype(int)\n",
    "\n",
    "plt.hist(senior, bins = 3)\n",
    "plt.xlabel = 'senior citizen'\n",
    "plt.ylabel = 'count'\n",
    "plt.xticks([0.15,0.85],['No','Yes'])\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "partner = (data['Partner']).astype(int)\n",
    "\n",
    "plt.hist(partner, bins = 3)\n",
    "plt.xlabel = 'partner'\n",
    "plt.ylabel = 'count'\n",
    "plt.xticks([0.15,0.85],['No','Yes'])\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "dependents = (data['Dependents']).astype(int)\n",
    "\n",
    "plt.hist(dependents, bins = 3)\n",
    "plt.xlabel = 'dependents'\n",
    "plt.ylabel = 'count'\n",
    "plt.xticks([0.15,0.85],['No','Yes'])\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "years = (data['tenure']).astype(int)\n",
    "\n",
    "plt.hist(years, bins = 6)\n",
    "plt.xlabel = 'years'\n",
    "plt.ylabel = 'count'\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "phoneservice = (data['PhoneService']).astype(int)\n",
    "\n",
    "plt.hist(phoneservice, bins = 3)\n",
    "plt.xlabel = 'phone service'\n",
    "plt.ylabel = 'count'\n",
    "plt.xticks([0.15,0.85],['No','Yes'])\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "multiplelines = (data['MultipleLines']).astype(int)\n",
    "\n",
    "plt.hist(multiplelines, bins = 5)\n",
    "plt.xlabel = 'multiple lines'\n",
    "plt.ylabel = 'count'\n",
    "plt.xticks([0.2, 1, 1.8],['No','Yes', 'No phone service'])\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "internetservice = (data['InternetService']).astype(int)\n",
    "\n",
    "plt.hist(internetservice, bins = 5)\n",
    "plt.xlabel = 'internet service'\n",
    "plt.ylabel = 'count'\n",
    "plt.xticks([0.2, 1, 1.8],['No','DSL', 'Fiber optic'])\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "onlinesecurity = (data['OnlineSecurity']).astype(int)\n",
    "\n",
    "plt.hist(onlinesecurity, bins = 5)\n",
    "plt.xlabel = 'online security'\n",
    "plt.ylabel = 'count'\n",
    "plt.xticks([0.2, 1, 1.8],['No','Yes', 'No internet service'])\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "onlinebackup = (data['OnlineBackup']).astype(int)\n",
    "\n",
    "plt.hist(onlinebackup, bins = 5)\n",
    "plt.xlabel = 'online backup'\n",
    "plt.ylabel = 'count'\n",
    "plt.xticks([0.2, 1, 1.8],['No','Yes', 'No internet service'])\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "deviceprotection = (data['DeviceProtection']).astype(int)\n",
    "\n",
    "plt.hist(deviceprotection, bins = 5)\n",
    "plt.xlabel = 'device protection'\n",
    "plt.ylabel = 'count'\n",
    "plt.xticks([0.2, 1, 1.8],['No','Yes', 'No internet service'])\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "techsupport = (data['TechSupport']).astype(int)\n",
    "\n",
    "plt.hist(techsupport, bins = 5)\n",
    "plt.xlabel = 'tech support'\n",
    "plt.ylabel = 'count'\n",
    "plt.xticks([0.2, 1, 1.8],['No','Yes', 'No internet service'])\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYAAAAD8CAYAAAB+UHOxAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4wLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvqOYd8AAAEP1JREFUeJzt3X3MnXV9x/H3R4rMKBswbhiUYgmp29Aosg5Qs4RF5clE0IEDnVZGUnUganQZmm0wDQlO0Y3o2EA7wKgMn6t2lsKMjBmlBWtLYYQOGNQSqMOJDwsG/O6P86scyt37ufcBfu9XcnKu8z2/67q+p+c+9+e+Hs7VVBWSpP48Y9QNSJJGwwCQpE4ZAJLUKQNAkjplAEhSpwwASeqUASBJnTIAJKlTBoAkdWrBqBuYyL777luLFy8edRuS9JRy0003/bCqxiYb96QOgMWLF7Nu3bpRtyFJTylJ/nsq49wFJEmdMgAkqVMGgCR1ygCQpE4ZAJLUKQNAkjplAEhSpwwASeqUASBJnXpSfxN4thaf+/VRtzDv7r7wVaNuQdJThFsAktQpA0CSOmUASFKnDABJ6pQBIEmdMgAkqVNP69NA9fTnqb7SzLkFIEmdMgAkqVMGgCR1ygCQpE4ZAJLUKQNAkjplAEhSpwwASeqUASBJnTIAJKlTBoAkdWrSAEiyKMk3k9yWZFOSd7T6+Ul+kGR9u504NM97k2xOcnuS44bqx7fa5iTn7pqXJEmaiqlcDO4R4N1VdXOSPYGbkqxpz320qj48PDjJYcBpwPOBA4FrkzyvPf1x4JXAFmBtkpVVdetcvBBJ0vRMGgBVdR9wX5v+SZLbgIUTzHIScFVVPQzclWQzcGR7bnNV3QmQ5Ko21gCQpBGY1jGAJIuBFwPfbaWzk2xIsiLJ3q22ELh3aLYtrbazuiRpBKYcAEmeA3wBeGdVPQRcAhwKHM5gC+Gi7UPHmb0mqO+4nuVJ1iVZt23btqm2J0mapikFQJLdGfzy/3RVfRGgqu6vqker6pfAZTy2m2cLsGho9oOArRPUH6eqLq2qpVW1dGxsbLqvR5I0RVM5CyjAJ4HbquojQ/UDhoa9BrilTa8ETkuyR5JDgCXAjcBaYEmSQ5I8k8GB4pVz8zIkSdM1lbOAXga8EdiYZH2rvQ84PcnhDHbj3A28BaCqNiW5msHB3UeAs6rqUYAkZwOrgd2AFVW1aQ5fiyRpGqZyFtANjL//ftUE81wAXDBOfdVE80mS5o/fBJakThkAktQpA0CSOmUASFKnDABJ6pQBIEmdMgAkqVMGgCR1ygCQpE4ZAJLUKQNAkjplAEhSpwwASeqUASBJnTIAJKlTBoAkdcoAkKROGQCS1CkDQJI6ZQBIUqcMAEnqlAEgSZ0yACSpUwaAJHXKAJCkThkAktQpA0CSOmUASFKnJg2AJIuSfDPJbUk2JXlHq++TZE2SO9r93q2eJBcn2ZxkQ5Ijhpa1rI2/I8myXfeyJEmTmcoWwCPAu6vqd4GjgbOSHAacC1xXVUuA69pjgBOAJe22HLgEBoEBnAccBRwJnLc9NCRJ82/SAKiq+6rq5jb9E+A2YCFwEnBFG3YFcHKbPgm4sga+A+yV5ADgOGBNVT1YVT8C1gDHz+mrkSRN2bSOASRZDLwY+C6wf1XdB4OQAPZrwxYC9w7NtqXVdlbfcR3Lk6xLsm7btm3TaU+SNA1TDoAkzwG+ALyzqh6aaOg4tZqg/vhC1aVVtbSqlo6NjU21PUnSNE0pAJLszuCX/6er6outfH/btUO7f6DVtwCLhmY/CNg6QV2SNAJTOQsowCeB26rqI0NPrQS2n8mzDPjKUP1N7Wygo4Eft11Eq4Fjk+zdDv4e22qSpBFYMIUxLwPeCGxMsr7V3gdcCFyd5EzgHuDU9twq4ERgM/Bz4AyAqnowyQeAtW3c+6vqwTl5FZKkaZs0AKrqBsbffw/w8nHGF3DWTpa1AlgxnQYlSbuG3wSWpE4ZAJLUKQNAkjplAEhSpwwASeqUASBJnTIAJKlTBoAkdcoAkKROGQCS1CkDQJI6ZQBIUqcMAEnqlAEgSZ0yACSpUwaAJHXKAJCkThkAktQpA0CSOmUASFKnDABJ6pQBIEmdMgAkqVMGgCR1ygCQpE4ZAJLUKQNAkjplAEhSpyYNgCQrkjyQ5Jah2vlJfpBkfbudOPTce5NsTnJ7kuOG6se32uYk5879S5EkTceCKYy5HPgYcOUO9Y9W1YeHC0kOA04Dng8cCFyb5Hnt6Y8DrwS2AGuTrKyqW2fRu6ROLD7366NuYd7dfeGrdvk6Jg2Aqro+yeIpLu8k4Kqqehi4K8lm4Mj23OaquhMgyVVtrAEgSSMym2MAZyfZ0HYR7d1qC4F7h8ZsabWd1Z8gyfIk65Ks27Zt2yzakyRNZKYBcAlwKHA4cB9wUatnnLE1Qf2JxapLq2ppVS0dGxubYXuSpMlM5RjAE1TV/dunk1wGfK093AIsGhp6ELC1Te+sLkkagRltASQ5YOjha4DtZwitBE5LskeSQ4AlwI3AWmBJkkOSPJPBgeKVM29bkjRbk24BJPkscAywb5ItwHnAMUkOZ7Ab527gLQBVtSnJ1QwO7j4CnFVVj7blnA2sBnYDVlTVpjl/NZKkKZvKWUCnj1P+5ATjLwAuGKe+Clg1re4kSbuM3wSWpE4ZAJLUKQNAkjplAEhSpwwASeqUASBJnTIAJKlTBoAkdcoAkKROGQCS1CkDQJI6ZQBIUqcMAEnqlAEgSZ0yACSpUwaAJHXKAJCkThkAktQpA0CSOmUASFKnDABJ6pQBIEmdMgAkqVMGgCR1ygCQpE4ZAJLUKQNAkjo1aQAkWZHkgSS3DNX2SbImyR3tfu9WT5KLk2xOsiHJEUPzLGvj70iybNe8HEnSVE1lC+By4PgdaucC11XVEuC69hjgBGBJuy0HLoFBYADnAUcBRwLnbQ8NSdJoTBoAVXU98OAO5ZOAK9r0FcDJQ/Ura+A7wF5JDgCOA9ZU1YNV9SNgDU8MFUnSPJrpMYD9q+o+gHa/X6svBO4dGrel1XZWlySNyFwfBM44tZqg/sQFJMuTrEuybtu2bXPanCTpMTMNgPvbrh3a/QOtvgVYNDTuIGDrBPUnqKpLq2ppVS0dGxubYXuSpMnMNABWAtvP5FkGfGWo/qZ2NtDRwI/bLqLVwLFJ9m4Hf49tNUnSiCyYbECSzwLHAPsm2cLgbJ4LgauTnAncA5zahq8CTgQ2Az8HzgCoqgeTfABY28a9v6p2PLAsSZpHkwZAVZ2+k6dePs7YAs7ayXJWACum1Z0kaZfxm8CS1CkDQJI6ZQBIUqcMAEnqlAEgSZ0yACSpUwaAJHXKAJCkThkAktQpA0CSOmUASFKnDABJ6pQBIEmdMgAkqVMGgCR1ygCQpE4ZAJLUKQNAkjplAEhSpwwASeqUASBJnTIAJKlTBoAkdcoAkKROGQCS1CkDQJI6ZQBIUqcMAEnq1KwCIMndSTYmWZ9kXavtk2RNkjva/d6tniQXJ9mcZEOSI+biBUiSZmYutgD+sKoOr6ql7fG5wHVVtQS4rj0GOAFY0m7LgUvmYN2SpBnaFbuATgKuaNNXACcP1a+sge8AeyU5YBesX5I0BbMNgAKuSXJTkuWttn9V3QfQ7vdr9YXAvUPzbmk1SdIILJjl/C+rqq1J9gPWJPnPCcZmnFo9YdAgSJYDHHzwwbNsT5K0M7PaAqiqre3+AeBLwJHA/dt37bT7B9rwLcCiodkPAraOs8xLq2ppVS0dGxubTXuSpAnMOACSPDvJntungWOBW4CVwLI2bBnwlTa9EnhTOxvoaODH23cVSZLm32x2Ae0PfCnJ9uV8pqq+kWQtcHWSM4F7gFPb+FXAicBm4OfAGbNYtyRplmYcAFV1J/Cicer/A7x8nHoBZ810fZKkueU3gSWpUwaAJHXKAJCkThkAktQpA0CSOmUASFKnDABJ6pQBIEmdMgAkqVMGgCR1ygCQpE4ZAJLUKQNAkjplAEhSpwwASeqUASBJnTIAJKlTBoAkdcoAkKROGQCS1CkDQJI6ZQBIUqcMAEnqlAEgSZ0yACSpUwaAJHXKAJCkThkAktSpeQ+AJMcnuT3J5iTnzvf6JUkD8xoASXYDPg6cABwGnJ7ksPnsQZI0MN9bAEcCm6vqzqr6BXAVcNI89yBJYv4DYCFw79DjLa0mSZpnC+Z5fRmnVo8bkCwHlreHP01y+y7vau7tC/xwFCvOB0ex1m6N5H32PZ53T8X3+blTGTTfAbAFWDT0+CBg6/CAqroUuHQ+m5prSdZV1dJR96Fdy/e5D0/n93m+dwGtBZYkOSTJM4HTgJXz3IMkiXneAqiqR5KcDawGdgNWVNWm+exBkjQw37uAqKpVwKr5Xu88e0rvwtKU+T734Wn7PqeqJh8lSXra8VIQktQpA2AWklSSi4YevyfJ+SNsSXMkAzckOWGo9rok3xhlX09Vs/2sJHn1ZJeOSbI4yetn0eaUJTl5Pq9ikOTAJJ+f6+UaALPzMPDaJPuOuhHNrRrsG30r8JEkv5bk2cAFwFmj7ewpa1aflapaWVUXTjJsMTCtAGiXp5mJkxlczmbOTNRLVW2tqlPmcn1gAMzWIwwOEL1rxyeSPDfJdUk2tPuD5789zUZV3QJ8FfgL4Dzgyqr6ryTLktyYZH2Sf0jyjCQLknwqycYktyQ5Z7TdP+nM6rOS5M1JPtamL09ycZJvJ7kzyfZfjBcCf9Del3cl2S3Jh5Ksbct+S5v/mCTfTPIZYGPbcrgtyWVJNiW5Jsmz2thDk3wjyU1J/j3J7yR5KfBq4ENtXYfu0Oup7Wfg+0mub7Wp9vLBJH82tKzzk7y79XjL0LI+3H7WNiR5e6v/XpJvtV5XJzlg0nelqrzN8Ab8FPh14G7gN4D3AOe3574KLGvTfwp8edT9epvRe/xs4HZgI7AH8ALgy8CC9vylDP7qPAr416H59hp170+m22w/K8CbgY+16cuBzzH4A/YwBtcXAzgG+NrQPMuBv2zTewDrgEPauJ8Bh7TnFjMIqMPb46uBP2nT1wFL2vRRwL8N9XDKTl7rRmDh8M/BNHp5MfCtoWXdChzceryl1d4GfGHoZ3AfYHfg28BYq/0xg9PsJ3xf5v000KebqnooyZXAOcD/DT31EuC1bfpTwN/Od2+avar6WZJ/AX5aVQ8neQXw+8C6JADPYnB9q9XAbyf5ewanOV8zqp6frOb4s/LlqvolcGuS/Xcy5ljghUNbCL8BLAF+AdxYVXcNjb2rqta36ZuAxUmeA7wU+Fx7r2Hwy3sy/wFcnuRq4IvT6aWqvpdkvyQHAmPAj6rqniSLh5b/CuAfq+qRNs+DSV7A4I+TNa3X3YD7JmvUAJgbfwfcDPzzBGM83/ap65ftBoPrWa2oqr/acVCSFzK41Pk5wB/x2DWt9Ji5+qw8PDQ93jXGttffXlWrH1dMjmHwV/fOlvcog2B/BvC/VXX4FPr5lap6a5KjgFcB65McPs1ePg+cAvwWgysm7yg88d8owKaqesl0evUYwByoqgcZbDaeOVT+NoNLXQC8AbhhvvvSLnEt8LrtBzOT/GaSg5OMMfhezecYHC84YpRNPlnt4s/KT4A9hx6vBt6WZHeAJM9rB/On2utDwF1JTm3zJ8mLdrKuX0lyaFV9t6r+msFF5BZNs5erGPx7nMIgDHZ0DfDWJAvasvZhsJtyLMlLWm33JM+f7DUaAHPnIgZXDdzuHOCMJBuANwLvGElXmlNVtRH4G+Da9t5eA+zP4EN+fZL1wGXA+0bX5ZPervqsbAAeaQdf3wV8gsE+9JvbAdR/Yvp7Pd4AnJnk+8AmHvv/S64C/jzJ93Y8CMzg4PDGts7rge9Pp5caXB5nT+AHVTXebpxPAPcAG1pfr6/B/69yCvDBVlvPYPfVhPwmsCR1yi0ASeqUASBJnTIAJKlTBoAkdcoAkKROGQCS1CkDQJI6ZQBIUqf+H2TtvkqJTpb1AAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "streamingtv = (data['StreamingTV']).astype(int)\n",
    "\n",
    "plt.hist(streamingtv, bins = 5)\n",
    "plt.xlabel = 'streaming tv'\n",
    "plt.ylabel = 'count'\n",
    "plt.xticks([0.2, 1, 1.8],['No','Yes', 'No internet service'])\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "streamingmovies = (data['StreamingMovies']).astype(int)\n",
    "\n",
    "plt.hist(streamingmovies, bins = 5)\n",
    "plt.xlabel = 'streaming movies'\n",
    "plt.ylabel = 'count'\n",
    "plt.xticks([0.2, 1, 1.8],['No','Yes', 'No internet service'])\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "contract = (data['Contract']).astype(int)\n",
    "\n",
    "plt.hist(contract, bins = 5)\n",
    "plt.xlabel = 'contract'\n",
    "plt.ylabel = 'count'\n",
    "plt.xticks([0.2, 1, 1.8],['Month-to-month','One year', 'Two year'])\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYAAAAD8CAYAAAB+UHOxAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4wLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvqOYd8AAAEtFJREFUeJzt3X+MXeV95/H3J+ZHorZbIEwi1jY1ar27Jd2tg6aE3fyThSwYUtWkWyqjqrFYJLeSUdKq2y1UWpEftZSsNqGLNkFyixsTtSVu2gpv6i11SKIKrQIMiQsYipgADVMjmK4JKZstXZPv/nEfl4uZH3fG47m4z/slXd1zvuc55z5Hsucz55znzpOqQpLUnzeNuwOSpPEwACSpUwaAJHXKAJCkThkAktQpA0CSOmUASFKnDABJ6pQBIEmdOm3cHVjIueeeWxs2bBh3NyTplPLggw/+TVVNLNbuDR0AGzZsYGpqatzdkKRTSpK/GqWdt4AkqVMGgCR1ygCQpE4ZAJLUKQNAkjplAEhSpwwASeqUASBJnTIAJKlTb+hvAktaHRtu/JNxd0HHefrj7zvpn+EVgCR1ygCQpE4ZAJLUKQNAkjo1cgAkWZPkG0m+2NYvSHJfkieSfD7JGa1+Zlufbts3DB3jplZ/PMkVK30ykqTRLeUK4EPAY0PrnwBuqaqNwAvA9a1+PfBCVf0IcEtrR5ILga3AO4DNwGeSrDmx7kuSlmukAEiyDngf8NttPcClwBdakz3A1W15S1unbb+std8C3FlVL1fVU8A0cPFKnIQkaelGvQL4TeA/Ad9r628Fvl1VR9v6DLC2La8FngFo219s7f+hPsc+/yDJ9iRTSaZmZ2eXcCqSpKVYNACS/CTwfFU9OFyeo2ktsm2hfV4tVO2qqsmqmpyYWHRKS0nSMo3yTeB3Az+V5CrgzcA/YXBFcFaS09pv+euAw639DLAemElyGvCDwJGh+jHD+0iSVtmiVwBVdVNVrauqDQwe4n65qn4O+ArwM63ZNuCutryvrdO2f7mqqtW3tlFCFwAbgftX7EwkSUtyIn8L6NeAO5P8BvAN4PZWvx34XJJpBr/5bwWoqkNJ9gKPAkeBHVX1ygl8viTpBCwpAKrqq8BX2/KTzDGKp6r+Drhmnv13AjuX2klJ0srzm8CS1CkDQJI6ZQBIUqcMAEnqlAEgSZ0yACSpUwaAJHXKAJCkThkAktQpA0CSOmUASFKnDABJ6pQBIEmdMgAkqVMGgCR1apQ5gd+c5P4kf5HkUJKPtPpnkzyV5GB7bWr1JLk1yXSSh5JcNHSsbUmeaK9t832mJOnkG2VCmJeBS6vqpSSnA/cm+Z9t269W1ReOa38lg+keNwLvAm4D3pXkHOBmYJLBZPAPJtlXVS+sxIlIkpZmlDmBq6peaqunt1ctsMsW4I6239cYTB5/HnAFcKCqjrQf+geAzSfWfUnSco30DCDJmiQHgecZ/BC/r23a2W7z3JLkzFZbCzwztPtMq81XlySNwUgBUFWvVNUmYB1wcZIfA24C/gXwE8A5DCaJB8hch1ig/hpJtieZSjI1Ozs7SvckScuwpFFAVfVtBpPCb66qZ9ttnpeB3+HVCeJngPVDu60DDi9QP/4zdlXVZFVNTkxMLKV7kqQlGGUU0ESSs9ryW4D3An/Z7uuTJMDVwCNtl33AB9pooEuAF6vqWeBu4PIkZyc5G7i81SRJYzDKKKDzgD1J1jAIjL1V9cUkX04yweDWzkHgF1v7/cBVwDTwXeA6gKo6kuRjwAOt3Uer6sjKnYokaSkWDYCqegh45xz1S+dpX8COebbtBnYvsY+SpJPAbwJLUqcMAEnqlAEgSZ0yACSpUwaAJHXKAJCkThkAktQpA0CSOmUASFKnDABJ6pQBIEmdMgAkqVMGgCR1ygCQpE4ZAJLUKQNAkjo1ypSQb05yf5K/SHIoyUda/YIk9yV5Isnnk5zR6me29em2fcPQsW5q9ceTXHGyTkqStLhRrgBeBi6tqh8HNgGb21y/nwBuqaqNwAvA9a399cALVfUjwC2tHUkuBLYC7wA2A59p00xKksZg0QCogZfa6untVcClwBdafQ+DieEBtrR12vbL2sTxW4A7q+rlqnqKwZzBF6/IWUiSlmykZwBJ1iQ5CDwPHAC+CXy7qo62JjPA2ra8FngGoG1/EXjrcH2OfSRJq2ykAKiqV6pqE7COwW/tPzpXs/aeebbNV3+NJNuTTCWZmp2dHaV7kqRlWNIooKr6NvBV4BLgrCSntU3rgMNteQZYD9C2/yBwZLg+xz7Dn7GrqiaranJiYmIp3ZMkLcEoo4AmkpzVlt8CvBd4DPgK8DOt2Tbgrra8r63Ttn+5qqrVt7ZRQhcAG4H7V+pEJElLc9riTTgP2NNG7LwJ2FtVX0zyKHBnkt8AvgHc3trfDnwuyTSD3/y3AlTVoSR7gUeBo8COqnplZU9HkjSqRQOgqh4C3jlH/UnmGMVTVX8HXDPPsXYCO5feTUnSSvObwJLUqVFuAZ2yNtz4J+Pugo7z9MffN+4uSGq8ApCkThkAktQpA0CSOmUASFKnDABJ6pQBIEmdMgAkqVMGgCR1ygCQpE4ZAJLUKQNAkjplAEhSpwwASeqUASBJnRplSsj1Sb6S5LEkh5J8qNU/nOSvkxxsr6uG9rkpyXSSx5NcMVTf3GrTSW48OackSRrFKPMBHAV+paq+nuQHgAeTHGjbbqmq/zrcOMmFDKaBfAfwT4EvJflnbfOngX/HYIL4B5Lsq6pHV+JEJElLM8qUkM8Cz7blv03yGLB2gV22AHdW1cvAU21u4GNTR063qSRJcmdrawBI0hgs6RlAkg0M5ge+r5VuSPJQkt1Jzm61tcAzQ7vNtNp8dUnSGIwcAEm+H/hD4Jeq6jvAbcAPA5sYXCF88ljTOXavBerHf872JFNJpmZnZ0ftniRpiUYKgCSnM/jh/7tV9UcAVfVcVb1SVd8DfotXb/PMAOuHdl8HHF6g/hpVtauqJqtqcmJiYqnnI0ka0SijgALcDjxWVZ8aqp831Oz9wCNteR+wNcmZSS4ANgL3Aw8AG5NckOQMBg+K963MaUiSlmqUUUDvBn4eeDjJwVb7deDaJJsY3MZ5GvgFgKo6lGQvg4e7R4EdVfUKQJIbgLuBNcDuqjq0guciSVqCUUYB3cvc9+/3L7DPTmDnHPX9C+0nSVo9fhNYkjplAEhSpwwASeqUASBJnTIAJKlTBoAkdcoAkKROGQCS1CkDQJI6ZQBIUqcMAEnqlAEgSZ0yACSpUwaAJHXKAJCkThkAktSpUaaEXJ/kK0keS3IoyYda/ZwkB5I80d7PbvUkuTXJdJKHklw0dKxtrf0TSbadvNOSJC1mlCuAo8CvVNWPApcAO5JcCNwI3FNVG4F72jrAlQzmAd4IbAdug0FgADcD72IwgfzNx0JDkrT6Fg2Aqnq2qr7elv8WeAxYC2wB9rRme4Cr2/IW4I4a+BpwVptA/grgQFUdqaoXgAPA5hU9G0nSyJb0DCDJBuCdwH3A26vqWRiEBPC21mwt8MzQbjOtNl9dkjQGIwdAku8H/hD4par6zkJN56jVAvXjP2d7kqkkU7Ozs6N2T5K0RCMFQJLTGfzw/92q+qNWfq7d2qG9P9/qM8D6od3XAYcXqL9GVe2qqsmqmpyYmFjKuUiSlmCUUUABbgceq6pPDW3aBxwbybMNuGuo/oE2GugS4MV2i+hu4PIkZ7eHv5e3miRpDE4boc27gZ8HHk5ysNV+Hfg4sDfJ9cC3gGvatv3AVcA08F3gOoCqOpLkY8ADrd1Hq+rIipyFJGnJFg2AqrqXue/fA1w2R/sCdsxzrN3A7qV0UJJ0cvhNYEnqlAEgSZ0yACSpUwaAJHXKAJCkThkAktQpA0CSOmUASFKnDABJ6pQBIEmdMgAkqVMGgCR1ygCQpE4ZAJLUKQNAkjplAEhSp0aZEnJ3kueTPDJU+3CSv05ysL2uGtp2U5LpJI8nuWKovrnVppPcuPKnIklailGuAD4LbJ6jfktVbWqv/QBJLgS2Au9o+3wmyZoka4BPA1cCFwLXtraSpDEZZUrIP0+yYcTjbQHurKqXgaeSTAMXt23TVfUkQJI7W9tHl9xjSdKKOJFnADckeajdIjq71dYCzwy1mWm1+eqvk2R7kqkkU7OzsyfQPUnSQpYbALcBPwxsAp4FPtnqc00eXwvUX1+s2lVVk1U1OTExsczuSZIWs+gtoLlU1XPHlpP8FvDFtjoDrB9qug443Jbnq0uSxmBZVwBJzhtafT9wbITQPmBrkjOTXABsBO4HHgA2JrkgyRkMHhTvW363JUknatErgCS/D7wHODfJDHAz8J4kmxjcxnka+AWAqjqUZC+Dh7tHgR1V9Uo7zg3A3cAaYHdVHVrxs5EkjWyUUUDXzlG+fYH2O4Gdc9T3A/uX1DtJ0knjN4ElqVMGgCR1ygCQpE4ZAJLUKQNAkjplAEhSpwwASeqUASBJnTIAJKlTBoAkdcoAkKROGQCS1CkDQJI6ZQBIUqcMAEnq1KIB0CZ9fz7JI0O1c5IcSPJEez+71ZPk1iTTbcL4i4b22dbaP5Fk28k5HUnSqEa5AvgssPm42o3APVW1EbinrQNcyWAayI3AdgaTx5PkHAYzib0LuBi4+VhoSJLGY9EAqKo/B44cV94C7GnLe4Crh+p31MDXgLPa/MFXAAeq6khVvQAc4PWhIklaRct9BvD2qnoWoL2/rdXXAs8MtZtptfnqkqQxWemHwJmjVgvUX3+AZHuSqSRTs7OzK9o5SdKrlhsAz7VbO7T351t9Blg/1G4dcHiB+utU1a6qmqyqyYmJiWV2T5K0mOUGwD7g2EiebcBdQ/UPtNFAlwAvtltEdwOXJzm7Pfy9vNUkSWNy2mINkvw+8B7g3CQzDEbzfBzYm+R64FvANa35fuAqYBr4LnAdQFUdSfIx4IHW7qNVdfyDZUnSKlo0AKrq2nk2XTZH2wJ2zHOc3cDuJfVOknTS+E1gSeqUASBJnTIAJKlTBoAkdcoAkKROGQCS1CkDQJI6ZQBIUqcMAEnqlAEgSZ0yACSpUwaAJHXKAJCkThkAktQpA0CSOmUASFKnTigAkjyd5OEkB5NMtdo5SQ4keaK9n93qSXJrkukkDyW5aCVOQJK0PCtxBfBvq2pTVU229RuBe6pqI3BPWwe4EtjYXtuB21bgsyVJy3QybgFtAfa05T3A1UP1O2rga8BZSc47CZ8vSRrBiQZAAX+W5MEk21vt7VX1LEB7f1urrwWeGdp3ptUkSWOw6KTwi3h3VR1O8jbgQJK/XKBt5qjV6xoNgmQ7wPnnn3+C3ZMkzeeErgCq6nB7fx74Y+Bi4Lljt3ba+/Ot+Qywfmj3dcDhOY65q6omq2pyYmLiRLonSVrAsgMgyfcl+YFjy8DlwCPAPmBba7YNuKst7wM+0EYDXQK8eOxWkSRp9Z3ILaC3A3+c5Nhxfq+q/jTJA8DeJNcD3wKuae33A1cB08B3getO4LMlSSdo2QFQVU8CPz5H/X8Dl81RL2DHcj9PkrSy/CawJHXKAJCkThkAktQpA0CSOmUASFKnDABJ6pQBIEmdMgAkqVMGgCR1ygCQpE4ZAJLUKQNAkjplAEhSpwwASeqUASBJnTIAJKlTqx4ASTYneTzJdJIbV/vzJUkDqxoASdYAnwauBC4Erk1y4Wr2QZI0sNpXABcD01X1ZFX9PXAnsGWV+yBJYvUDYC3wzND6TKtJklbZsieFX6bMUavXNEi2A9vb6ktJHj/pvXpjORf4m3F34mTJJ8bdA3XolPw/dYL/V35olEarHQAzwPqh9XXA4eEGVbUL2LWanXojSTJVVZPj7of0j4X/p+a32reAHgA2JrkgyRnAVmDfKvdBksQqXwFU1dEkNwB3A2uA3VV1aDX7IEkaWO1bQFTVfmD/an/uKaTb21/SSeL/qXmkqhZvJUn6R8c/BSFJnTIAxihJJfnk0Pp/TPLhMXZJOuVk4N4kVw7VfjbJn46zX6cCA2C8XgZ+Osm54+6IdKqqwX3sXwQ+leTNSb4P2AnsGG/P3vgMgPE6yuAB1S8fvyHJDyW5J8lD7f381e+edGqoqkeA/wH8GnAzcEdVfTPJtiT3JzmY5DNJ3pTktCSfS/JwkkeSfHC8vR+fVR8FpNf5NPBQkv9yXP2/M/hHvCfJfwBuBa5e9d5Jp46PAF8H/h6YTPJjwPuBf9OGoO9i8N2jbwLnVtW/BEhy1rg6PG4GwJhV1XeS3AF8EPi/Q5v+NfDTbflzwPEBIWlIVf2fJJ8HXqqql5O8F/gJYCoJwFsY/C2yu4F/nuS/MRiS/mfj6vO4GQBvDL/J4DeX31mgjeN1pcV9r71g8LfHdlfVfz6+UZJ/xeDP0n8Q+Pe8+vfHuuIzgDeAqjoC7AWuHyr/LwaXqwA/B9y72v2STnFfAn722CCLJG9Ncn6SCQbfgfoDBs8LLhpnJ8fJK4A3jk8CNwytfxDYneRXgVngurH0SjpFVdXDST4CfCnJm4D/x2C00CvA7RncFyoGD4675DeBJalT3gKSpE4ZAJLUKQNAkjplAEhSpwwASeqUASBJnTIAJKlTBoAkder/A+0+H62rNZEqAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "paperlessbilling = (data['PaperlessBilling']).astype(int)\n",
    "\n",
    "plt.hist(paperlessbilling, bins = 3)\n",
    "plt.xlabel = 'paperless billing'\n",
    "plt.ylabel = 'count'\n",
    "plt.xticks([0.15,0.85],['No','Yes'])\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(data['MonthlyCharges'], bins = 8)\n",
    "plt.xlabel = 'monthly charge'\n",
    "plt.ylabel = 'count'\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/kousukemaeda/anaconda3/lib/python3.6/site-packages/numpy/lib/function_base.py:780: RuntimeWarning: invalid value encountered in greater_equal\n",
      "  keep = (tmp_a >= first_edge)\n",
      "/Users/kousukemaeda/anaconda3/lib/python3.6/site-packages/numpy/lib/function_base.py:781: RuntimeWarning: invalid value encountered in less_equal\n",
      "  keep &= (tmp_a <= last_edge)\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(data['TotalCharges'], bins = 8)\n",
    "plt.xlabel = 'total charge'\n",
    "plt.ylabel = 'count'\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "churn = (data['Churn']).astype(int)\n",
    "\n",
    "plt.hist(churn, bins = 3)\n",
    "plt.xlabel = 'churn'\n",
    "plt.ylabel = 'count'\n",
    "plt.xticks([0.15,0.85],['No','Yes'])\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Machine Learning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = data.values[:, 1:17]\n",
    "y = data.values[:,-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.33, random_state = 42)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
       "          intercept_scaling=1, max_iter=100, multi_class='ovr', n_jobs=1,\n",
       "          penalty='l2', random_state=None, solver='liblinear', tol=0.0001,\n",
       "          verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "lr = LogisticRegression()\n",
    "lr.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7971598134802883"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr.score(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8146236559139785"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred = lr.predict(x_test)\n",
    "lr.score(x_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1529  168]\n",
      " [ 263  365]]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "matrix = confusion_matrix(y_test, y_pred)\n",
    "print(matrix)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "             precision    recall  f1-score   support\n",
      "\n",
      "          0       0.85      0.90      0.88      1697\n",
      "          1       0.68      0.58      0.63       628\n",
      "\n",
      "avg / total       0.81      0.81      0.81      2325\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import classification_report\n",
    "print(classification_report(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8146236559139785\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import accuracy_score\n",
    "print(accuracy_score(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Decision Tree Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeClassifier(class_weight=None, criterion='gini', max_depth=None,\n",
       "            max_features=None, max_leaf_nodes=None,\n",
       "            min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "            min_samples_leaf=1, min_samples_split=2,\n",
       "            min_weight_fraction_leaf=0.0, presort=False, random_state=42,\n",
       "            splitter='best')"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "\n",
    "clf1 = DecisionTreeClassifier(random_state = 42)\n",
    "clf1.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['0', '1', '0', ..., '0', '1', '0'], dtype=object)"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred_train = clf1.predict(x_train)\n",
    "y_pred_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Predicted</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Actual</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3445</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>95</td>\n",
       "      <td>1146</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Predicted     0     1\n",
       "Actual               \n",
       "0          3445    32\n",
       "1            95  1146"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_confusion_train = pd.crosstab(y_train, y_pred_train, rownames=['Actual'], colnames=['Predicted'])\n",
    "data_confusion_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy is  97.30818143281051\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import accuracy_score\n",
    "print('Accuracy is ', accuracy_score(y_train,y_pred_train)*100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['0', '0', '0', ..., '1', '0', '1'], dtype=object)"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred_test = clf1.predict(x_test)\n",
    "y_pred_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Predicted</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Actual</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1354</td>\n",
       "      <td>343</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>314</td>\n",
       "      <td>314</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Predicted     0    1\n",
       "Actual              \n",
       "0          1354  343\n",
       "1           314  314"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_confusion_test = pd.crosstab(y_test, y_pred_test, rownames=['Actual'], colnames=['Predicted'])\n",
    "data_confusion_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy is  71.74193548387096\n"
     ]
    }
   ],
   "source": [
    "print('Accuracy is ', accuracy_score(y_test,y_pred_test)*100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4     0.291209\n",
       "14    0.179233\n",
       "7     0.054032\n",
       "0     0.051413\n",
       "10    0.043742\n",
       "6     0.042488\n",
       "2     0.042446\n",
       "9     0.041974\n",
       "12    0.040535\n",
       "15    0.039383\n",
       "13    0.038027\n",
       "8     0.034696\n",
       "1     0.033577\n",
       "3     0.032036\n",
       "11    0.031795\n",
       "5     0.003414\n",
       "dtype: float64"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feature_imp1 = pd.Series(clf1.feature_importances_).sort_values(ascending=False)\n",
    "feature_imp1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Random Forest Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n",
       "            max_depth=None, max_features='auto', max_leaf_nodes=None,\n",
       "            min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "            min_samples_leaf=1, min_samples_split=2,\n",
       "            min_weight_fraction_leaf=0.0, n_estimators=50, n_jobs=1,\n",
       "            oob_score=True, random_state=None, verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "clf2 = RandomForestClassifier(n_estimators=50, oob_score=True)\n",
    "clf2.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['0', '1', '0', ..., '0', '1', '0'], dtype=object)"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred_train = clf2.predict(x_train)\n",
    "y_pred_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Predicted</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Actual</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3418</td>\n",
       "      <td>59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>70</td>\n",
       "      <td>1171</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Predicted     0     1\n",
       "Actual               \n",
       "0          3418    59\n",
       "1            70  1171"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_confusion_train = pd.crosstab(y_train, y_pred_train, rownames=['Actual'], colnames=['Predicted'])\n",
    "data_confusion_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy is  97.26579058923272\n"
     ]
    }
   ],
   "source": [
    "print('Accuracy is ', accuracy_score(y_train,y_pred_train)*100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['1', '0', '0', ..., '1', '0', '0'], dtype=object)"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred_test = clf2.predict(x_test)\n",
    "y_pred_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Predicted</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Actual</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1522</td>\n",
       "      <td>175</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>317</td>\n",
       "      <td>311</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Predicted     0    1\n",
       "Actual              \n",
       "0          1522  175\n",
       "1           317  311"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_confusion2 = pd.crosstab(y_test, y_pred_test, rownames=['Actual'], colnames=['Predicted'])\n",
    "data_confusion2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy is  78.83870967741935\n"
     ]
    }
   ],
   "source": [
    "print('Accuracy is ', accuracy_score(y_test,y_pred_test)*100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4     0.361379\n",
       "14    0.091752\n",
       "8     0.053674\n",
       "11    0.052543\n",
       "7     0.051842\n",
       "0     0.046161\n",
       "6     0.041967\n",
       "10    0.039642\n",
       "2     0.038943\n",
       "13    0.038792\n",
       "9     0.038709\n",
       "12    0.037710\n",
       "15    0.037014\n",
       "1     0.033098\n",
       "3     0.029836\n",
       "5     0.006939\n",
       "dtype: float64"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feature_imp2 = pd.Series(clf2.feature_importances_).sort_values(ascending=False)\n",
    "feature_imp2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Logistic Regression has the highest accuracy score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
